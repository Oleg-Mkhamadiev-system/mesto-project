/*! For license information please see main.173006509c3d9afb62f1.js.LICENSE.txt */
(()=>{"use strict";var t=document.querySelector(".popup_content_profile"),e=document.querySelector(".popup_content_elements"),r=document.querySelector(".popup_content_images"),n=document.querySelector(".popup_content_avatar"),o=document.querySelector(".popup_delete_confirm"),a=document.querySelector(".profile__edit-button"),i=document.querySelector(".profile__add-button"),c=document.querySelector(".profile__avatar-button"),u=document.querySelectorAll(".popup__close-button"),l=t.querySelector(".popup__form"),s=l.querySelector(".popup__save-button"),f=t.querySelector(".popup__input_data_name"),p=t.querySelector(".popup__input_data_profession"),d=document.querySelector(".profile__title"),h=document.querySelector(".profile__subtitle"),v=document.querySelector(".profile__avatar"),y=e.querySelector(".popup__form"),m=y.querySelector(".popup__save-button"),_=n.querySelector(".popup__form"),b=_.querySelector(".popup__save-button"),g=(o.querySelector(".popup__form"),e.querySelector(".popup__input_data_place")),S=e.querySelector(".popup__input_link_image"),w=n.querySelector(".popup__input_link_avatar"),L=(document.querySelector(".elements__card-text"),document.querySelector(".elements__card-image"),document.querySelector(".elements__card"),document.querySelector(".popup__image")),E=document.querySelector(".popup__figcaption"),x=Array.from(document.querySelectorAll(".popup")),q=document.querySelector(".elements__cards"),k=["inputSelector","submitButtonSelector","inactiveButtonClass"];function O(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var C=function(t,e,r,n){var o=n.inputErrorClass,a=n.errorClass,i=t.querySelector("#".concat(e.id,"-error"));e.classList.add(o),i.textContent=r,i.classList.add(a)},j=function(t,e,r){t.some((function(t){return!t.validity.valid}))?(e.disabled=!0,e.classList.add(r)):(e.disabled=!1,e.classList.remove(r))};function A(t){t.classList.add("popup_opened"),document.addEventListener("keydown",I)}function P(t){t.classList.remove("popup_opened"),document.removeEventListener("keydown",I)}function T(t){d.textContent=t.name,h.textContent=t.about}function N(t){v.src=t.avatar}function U(t){t.disabled=!0,t.classList.add("popup__save-button_disabled")}function G(t,e){t?e.textContent="Сохранение...":(s.textContent="Сохранить",b.textContent="Сохранить",m.textContent="Создать")}function I(t){"Escape"===t.key&&P(document.querySelector(".popup_opened"))}var B,D,F,M,J={baseUrl:"https://nomoreparties.co/v1/plus-cohort-23",headers:{authorization:"8e6d025a-6054-4076-a0d4-21047d048aad","Content-Type":"application/json"}},H=function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))};function Y(t,e,n,o,a,i){var c=document.querySelector(".template__elements").content.querySelector(".elements__card").cloneNode(!0);c.querySelector(".elements__card-text").textContent=t;var u=c.querySelector(".elements__card-image");u.src=e,u.alt=t,u.addEventListener("click",(function(){!function(t,e){L.src=e,L.alt=t,E.textContent=t,A(r)}(t,e)}));var l=c.querySelector(".elements__like-button"),s=c.querySelector(".elements__like-number");s.textContent=a.length,l.addEventListener("click",(function(t){var e;l.dataset.id=n,t.target.classList.contains("elements__like-button_active")?(e=n,fetch("".concat(J.baseUrl,"/cards/").concat(e,"/likes"),{method:"DELETE",headers:J.headers}).then((function(t){return H(t)}))).then((function(){s.textContent=--a.length,l.classList.remove("elements__like-button_active")})).catch((function(t){console.log(t)})):function(t){return fetch("".concat(J.baseUrl,"/cards/").concat(t,"/likes"),{method:"PUT",headers:J.headers}).then((function(t){return H(t)}))}(n).then((function(){s.textContent=++a.length,l.classList.add("elements__like-button_active")})).catch((function(t){console.log(t)}))}));for(var f=0;f<a.length;f++)a[f]._id===i&&l.classList.add("elements__like-button_active");var p=c.querySelector(".elements__delete-button");return i!==o&&p.remove(),p.addEventListener("click",(function(t){var e,r=t.target.closest(".elements__card");r.dataset.id=n,(e=n,fetch("".concat(J.baseUrl,"/cards/").concat(e),{method:"DELETE",headers:J.headers}).then((function(t){return H(t)}))).then((function(){r.remove()})).catch((function(t){console.log(t)}))})),c}function z(t){return z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},z(t)}function $(){$=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function l(t,e,r,o){var a=e&&e.prototype instanceof p?e:p,i=Object.create(a.prototype),c=new x(o||[]);return n(i,"_invoke",{value:S(t,r,c)}),i}function s(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var f={};function p(){}function d(){}function h(){}var v={};u(v,a,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(q([])));m&&m!==e&&r.call(m,a)&&(v=m);var _=h.prototype=p.prototype=Object.create(v);function b(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function g(t,e){function o(n,a,i,c){var u=s(t[n],t,a);if("throw"!==u.type){var l=u.arg,f=l.value;return f&&"object"==z(f)&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){o("next",t,i,c)}),(function(t){o("throw",t,i,c)})):e.resolve(f).then((function(t){l.value=t,i(l)}),(function(t){return o("throw",t,i,c)}))}c(u.arg)}var a;n(this,"_invoke",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return a=a?a.then(n,n):n()}})}function S(t,e,r){var n="suspendedStart";return function(o,a){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw a;return{value:void 0,done:!0}}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var c=w(i,r);if(c){if(c===f)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var u=s(t,e,r);if("normal"===u.type){if(n=r.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n="completed",r.method="throw",r.arg=u.arg)}}}function w(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,w(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),f;var o=s(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,f;var a=o.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function L(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(L,this),this.reset(!0)}function q(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:k}}function k(){return{value:void 0,done:!0}}return d.prototype=h,n(_,"constructor",{value:h,configurable:!0}),n(h,"constructor",{value:d,configurable:!0}),d.displayName=u(h,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===d||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,u(t,c,"GeneratorFunction")),t.prototype=Object.create(_),t},t.awrap=function(t){return{__await:t}},b(g.prototype),u(g.prototype,i,(function(){return this})),t.AsyncIterator=g,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new g(l(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},b(_),u(_,c,"Generator"),u(_,a,(function(){return this})),u(_,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=q,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return i.type="throw",i.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return n("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=t,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),E(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:q(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}function K(t,e,r,n,o,a,i){try{var c=t[a](i),u=c.value}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o)}function Q(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var a=t.apply(e,r);function i(t){K(a,n,o,i,c,"next",t)}function c(t){K(a,n,o,i,c,"throw",t)}i(void 0)}))}}function R(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function V(){return(V=Q($().mark((function t(e){return $().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e.preventDefault(),G(!0,b),t.prev=2,t.next=5,r={avatar:w.value},fetch("".concat(J.baseUrl,"/users/me/avatar"),{method:"PATCH",headers:J.headers,body:JSON.stringify({avatar:r.avatar})}).then((function(t){return H(t)}));case 5:N(t.sent),P(n),U(b),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(2),console.log(t.t0);case 14:return t.prev=14,G(!1,s),t.finish(14);case 17:case"end":return t.stop()}var r}),t,null,[[2,11,14,17]])})))).apply(this,arguments)}function W(){return(W=Q($().mark((function e(r){return $().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r.preventDefault(),G(!0,s),e.prev=2,e.next=5,n={name:f.value,about:p.value},fetch("".concat(J.baseUrl,"/users/me"),{method:"PATCH",headers:J.headers,body:JSON.stringify({name:n.name,about:n.about})}).then((function(t){return H(t)}));case 5:T(e.sent),P(t),U(s),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(2),console.log(e.t0);case 14:return e.prev=14,G(!1,s),e.finish(14);case 17:case"end":return e.stop()}var n}),e,null,[[2,11,14,17]])})))).apply(this,arguments)}Promise.all([fetch("".concat(J.baseUrl,"/users/me"),{method:"GET",headers:J.headers}).then((function(t){return H(t)})),fetch("".concat(J.baseUrl,"/cards"),{method:"GET",headers:J.headers}).then((function(t){return H(t)}))]).then((function(t){var e,r,n=(r=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a,i,c=[],u=!0,l=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=a.call(r)).done)&&(c.push(n.value),c.length!==e);u=!0);}catch(t){l=!0,o=t}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(l)throw o}}return c}}(e,r)||function(t,e){if(t){if("string"==typeof t)return R(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?R(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=n[0],a=n[1];T(o),N(o),B=o._id,a.forEach((function(t){var e=Y(t.name,t.link,t._id,t.owner._id,t.likes,B);q.prepend(e)}))})).catch((function(t){console.log(t)})),a.addEventListener("click",(function(){f.value=d.textContent,p.value=h.textContent,A(t)})),i.addEventListener("click",(function(){A(e)})),c.addEventListener("click",(function(){w.value=v.src,A(n)})),l.addEventListener("submit",(function(t){return W.apply(this,arguments)})),y.addEventListener("submit",(function(t){var r;t.preventDefault(),G(!0,m),(r={name:g.value,link:S.value},fetch("".concat(J.baseUrl,"/cards"),{method:"POST",headers:J.headers,body:JSON.stringify({name:r.name,link:r.link})}).then((function(t){return H(t)}))).then((function(t){var r=Y(t.name,t.link,t._id,t.owner._id,t.likes,t.owner._id);q.prepend(r),P(e),y.reset(),U(m)})).catch((function(t){console.log(t)})).finally((function(){G(!1,m)}))})),_.addEventListener("submit",(function(t){return V.apply(this,arguments)})),u.forEach((function(t){var e=t.closest(".popup");t.addEventListener("click",(function(){return P(e)}))})),x.forEach((function(t){t.addEventListener("click",(function(e){e.target.classList.contains("popup__overlay")&&P(t)}))})),F=(D={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_visible"}).formSelector,M=O(D,["formSelector"]),Array.from(document.querySelectorAll(F)).forEach((function(t){!function(t,e){var r=e.inputSelector,n=e.submitButtonSelector,o=e.inactiveButtonClass,a=O(e,k),i=Array.from(t.querySelectorAll(r)),c=t.querySelector(n);j(i,c,o),i.forEach((function(e){e.addEventListener("input",(function(){!function(t,e,r){e.validity.valid?function(t,e,r){var n=r.inputErrorClass,o=r.errorClass,a=t.querySelector("#".concat(e.id,"-error"));e.classList.remove(n),a.textContent="",a.classList.remove(o)}(t,e,r):e.validity.patternMismatch?C(t,e,e.dataset.errorMessage,r):C(t,e,e.validationMessage,r)}(t,e,a),j(i,c,o)}))}))}(t,M)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,